package com.android.srx.github.dbgenerator.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.srx.github.dbgenerator.DownloadEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_ENTITY".
*/
public class DownloadEntityDao extends AbstractDao<DownloadEntity, Long> {

    public static final String TABLENAME = "DOWNLOAD_ENTITY";

    /**
     * Properties of entity DownloadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Start_position = new Property(1, long.class, "start_position", false, "START_POSITION");
        public final static Property End_position = new Property(2, long.class, "end_position", false, "END_POSITION");
        public final static Property Progress_postion = new Property(3, long.class, "progress_postion", false, "PROGRESS_POSTION");
        public final static Property Download_url = new Property(4, String.class, "download_url", false, "DOWNLOAD_URL");
        public final static Property Thread_id = new Property(5, int.class, "thread_id", false, "THREAD_ID");
    }


    public DownloadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"START_POSITION\" INTEGER NOT NULL ," + // 1: start_position
                "\"END_POSITION\" INTEGER NOT NULL ," + // 2: end_position
                "\"PROGRESS_POSTION\" INTEGER NOT NULL ," + // 3: progress_postion
                "\"DOWNLOAD_URL\" TEXT," + // 4: download_url
                "\"THREAD_ID\" INTEGER NOT NULL );"); // 5: thread_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getStart_position());
        stmt.bindLong(3, entity.getEnd_position());
        stmt.bindLong(4, entity.getProgress_postion());
 
        String download_url = entity.getDownload_url();
        if (download_url != null) {
            stmt.bindString(5, download_url);
        }
        stmt.bindLong(6, entity.getThread_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getStart_position());
        stmt.bindLong(3, entity.getEnd_position());
        stmt.bindLong(4, entity.getProgress_postion());
 
        String download_url = entity.getDownload_url();
        if (download_url != null) {
            stmt.bindString(5, download_url);
        }
        stmt.bindLong(6, entity.getThread_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadEntity readEntity(Cursor cursor, int offset) {
        DownloadEntity entity = new DownloadEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // start_position
            cursor.getLong(offset + 2), // end_position
            cursor.getLong(offset + 3), // progress_postion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // download_url
            cursor.getInt(offset + 5) // thread_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setStart_position(cursor.getLong(offset + 1));
        entity.setEnd_position(cursor.getLong(offset + 2));
        entity.setProgress_postion(cursor.getLong(offset + 3));
        entity.setDownload_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThread_id(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
